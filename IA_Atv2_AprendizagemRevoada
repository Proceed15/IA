 # -*- coding: utf-8 -*-
from __future__ import division, print_function, absolute_import
#Programa para usar o algoritmo anterior, o qual ainda precisa dos dados que serão utilizados para o treinamento dessa IA.

import tflearn
from tflearn.layers.core import input_data, dropout, fully_connected
from tflearn.layers.conv import conv_2d, max_pool_2d
from tflearn.layers.estimator import regression
from tflearn.data_preprocessing import ImagePreprocessing
from tflearn.data_augmentation import ImageAugmentation
import scipy
import numpy as np
import argparse

parser = argparse.ArgumentParser(description='Decida se a imagem é de um pássaro')
parser.add_argument('image', type=str, help='A imagem para ser verificada')
args = parser.parse_args()


# A mesma definição de Rede que antes
img_prep = ImagePreprocessing()
img_prep.add_featurewise_zero_center()
img_prep.add_featurewise_stdnorm()
img_aug = ImageAugmentation()
img_aug.add_random_flip_leftright()
img_aug.add_random_rotation(max_angle=25.)
img_aug.add_random_blur(sigma_max=3.)

network = input_data(shape=[None, 32, 32, 3],
                     data_preprocessing=img_prep,
                     data_augmentation=img_aug)
network = conv_2d(network, 32, 3, activation='relu')
network = max_pool_2d(network, 2)
network = conv_2d(network, 64, 3, activation='relu')
network = conv_2d(network, 64, 3, activation='relu')
network = max_pool_2d(network, 2)
network = fully_connected(network, 512, activation='relu')
network = dropout(network, 0.5)
network = fully_connected(network, 2, activation='softmax')
network = regression(network, optimizer='adam',
                     loss='categorical_crossentropy',
                     learning_rate=0.001)

model = tflearn.DNN(network, tensorboard_verbose=0, checkpoint_path='bird-classifier.tfl.ckpt')
model.load("bird-classifier.tfl.ckpt-50912")

# Para carregar a imagem, seja qual arquivo for
img = scipy.ndimage.imread(args.image, mode="RGB")

# Escala a imagem a 32x32
img = scipy.misc.imresize(img, (32, 32), interp="bicubic").astype(np.float32, casting='unsafe')

# Prediz se é
prediction = model.predict([img])

# Verifica se é
is_bird = np.argmax(prediction[0]) == 1

# Retorna se é
if is_bird:
    print("Isso é um pássaro!")
else:
    print("Isso não é um pássaro!")
